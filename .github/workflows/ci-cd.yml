name: ci-cd

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Docker meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/1000ju/stocker_node
          tags: |
            type=raw,value=latest
            type=sha,format=short,prefix=main-

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: 1000ju
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check SSH reachability
        run: |
          H="${{ secrets.SSH_HOST }}"; P="${{ secrets.SSH_PORT || 22 }}"
          echo "checking $H:$P ..."
          timeout 5 bash -lc "echo > /dev/tcp/$H/$P" \
            && echo "OK" || (echo "TCP $P closed"; exit 1)

      - name: Deploy (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          debug: true
          timeout: "60s"
          command_timeout: "15m"
          script: |
            set -euo pipefail

            # 1) compose 있는 폴더로 이동 (서버 실제 경로 확인해서 맞춰두기)
            cd ~/app

            # 2) 앱 이미지만 갱신
            echo '${{ secrets.GHCR_TOKEN }}' | sudo docker login ghcr.io -u 1000ju --password-stdin
            sudo docker compose pull app

            # 3) DB는 건드리지 않고 app만 재생성
            sudo docker compose up -d --no-deps --force-recreate app

            # 4) 헬스 대기 (최대 90초)
            for i in $(seq 1 90); do
              if curl -fsS http://localhost:8080/api/health >/dev/null; then
                echo "Deploy OK"
                break
              fi
              # 컨테이너가 죽었는지/재시작 중인지 점검
              if ! sudo docker ps --format '{{.Names}}' | grep -q '^stocker_app$'; then
                echo "app container is not running"; sudo docker logs --tail=200 stocker_app || true; exit 1
              fi
              # (선택) health 상태 확인
              sudo docker inspect -f '{{.State.Health.Status}}' stocker_app 2>/dev/null || true
              sleep 1
              if [ "$i" -eq 90 ]; then
                echo "Timeout waiting for /api/health"; sudo docker logs --tail=300 stocker_app || true; exit 1
              fi
            done

            # 5) (옵션) 마이그레이션 자동실행이 필요할 때만 사용
            # sudo docker exec stocker_app sh -lc 'npx --yes sequelize-cli db:migrate'
