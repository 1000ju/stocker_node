name: ci-cd

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Docker meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/1000ju/stocker_node
          tags: |
            type=raw,value=latest
            type=sha,format=short,prefix=main-

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: 1000ju
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check SSH reachability
        run: |
          H="${{ secrets.SSH_HOST }}"; P="${{ secrets.SSH_PORT || 22 }}"
          echo "checking $H:$P ..."
          timeout 5 bash -lc "echo > /dev/tcp/$H/$P" \
            && echo "OK" || (echo "TCP $P closed"; exit 1)

      - name: Deploy (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }} # OpenSSH 개인키 전체 문자열
          port: ${{ secrets.SSH_PORT || 22 }} # 필요 시 시크릿으로 지정
          script_stop: true
          debug: true
          timeout: "60s"
          command_timeout: "15m"
          script: |
            set -euo pipefail

            # ✅ 서버에서 docker-compose.yml 이 있는 실제 폴더로 이동
            REMOTE_DIR="${{ secrets.REMOTE_DIR || '/home/ubuntu/app' }}"
            cd "$REMOTE_DIR"

            # ✅ GHCR 로그인
            echo '${{ secrets.GHCR_TOKEN }}' | sudo docker login ghcr.io -u 1000ju --password-stdin

            # ✅ 앱 이미지만 최신으로 당겨오기 (DB 건드리지 않음)
            sudo docker compose pull app

            # ✅ DB는 그대로 두고 app 서비스만 재생성 (이게 핵심)
            sudo docker compose up -d --no-deps --force-recreate app

            # (옵션) 오래된 이미지 정리
            sudo docker image prune -af --filter "until=24h" || true

            # ✅ 상태 점검
            sudo docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
            sudo docker logs --tail=120 stocker_app || true
            curl -fsS http://localhost:8080/api/health >/dev/null
            echo "Deploy OK"
